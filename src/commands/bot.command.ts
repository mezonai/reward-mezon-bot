import { se } from "date-fns/locale";
import {
  formatLeaderboard,
  formatListRole,
  formatListTrophy,
  formatListTrophyUser,
} from "../ultis/constant";
import {
  assignRoleOnScore,
  awardTrophy,
  createTrophy,
  listRoleRewards,
  listTrophy,
  rankReward,
  sendMessage,
  topWeek,
  trophyUser,
} from "../ultis/fn";

interface Action {
  action :  "create" | "update" | "delete",
}

export const commands = {
  "reward_help": {
    description: "Hi·ªÉn th·ªã danh s√°ch c√°c l·ªánh c√≥ s·∫µn",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {

      const helpText = `
      üéÆ **Danh s√°ch l·ªánh:**
      *reward_help - Hi·ªÉn th·ªã danh s√°ch l·ªánh
      *new - T·∫°o trophy m·ªõi - *new t√™n trophy | m√¥ t·∫£ | gi√° tr·ªã
      *list_trophy - Xem danh s√°ch trophy
      *trophy_award @ng∆∞·ªùi d√πng | Trophy Name - (Trao trophy cho ng∆∞·ªùi d√πng)
      *rank - Xem b·∫£ng x·∫øp h·∫°ng trophy
      *top_week - Xem b·∫£ng x·∫øp h·∫°ng trophy tu·∫ßn n√†y
      *top_month - Xem b·∫£ng x·∫øp h·∫°ng trophy th√°ng n√†y
      *trophy or *trophy user - Xem danh s√°ch trophy c·ªßa ng∆∞·ªùi d√πng ho·∫∑c c·ªßa b·∫£n th√¢n
      *list - Xem danh s√°ch role rewards 
      *role_reward (
        delete | role_name ) - x√≥a role_reward
        create | role_name | ƒëi·ªÉm - t·∫°o role_reward
        update | role_name | ƒëi·ªÉm - c·∫≠p nh·∫≠t role_reward
      )
            `;
      await sendMessage(channel, helpText, message_id, server);
    },
  },

 
  new: {
    description: "T·∫°o m·ªôt trophy m·ªõi",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      
        const fullArg = args.join(" ");
        const [name, description, points, icon] = fullArg
          .split("|")
          .map((s) => s.trim());

        const result = await createTrophy(
          name,
          description,
          +points,
          icon,
          sender_id as string
        );

        if (
          result &&
          Array.isArray(result.content) &&
          typeof result.content[0]?.text === "string"
        ) {
          await sendMessage(channel, result.content[0].text, message_id,server);
        } else {
          await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.",message_id,server);
        }
    },
  },

  trophy_award: {
    description: "Trao trophy cho ng∆∞·ªùi d√πng",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      const fullArg = args.join(" ");
      const [Name, rewardName] = fullArg.split("|").map((s) => s.trim());
      const userName = Name.replace("@", "").trim();


      const result = await awardTrophy(user_id, rewardName, userName);
      if (
        result &&
        Array.isArray(result.content) &&
        typeof result.content[0]?.text === "string"
      ) {
        await sendMessage(channel, result.content[0].text,message_id ,server);
      } else {
        await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.", message_id,server);
      }
    },
  },

  rank: {
    description: "Xem b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi d√πng",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      const fullArg = args.join(" ");
      const result = await rankReward(+fullArg ? +fullArg : 10);

      if (
        result &&
        Array.isArray(result.content) &&
        typeof result.content[0]?.text === "string"
      ) {
        const text = formatLeaderboard(JSON.parse(result.content[0].text));


        await sendMessage(channel, text, message_id,server);
      } else {
        await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.",message_id ,server);
      }
    },
  },

  trophy: {
    description: "Xem danh s√°ch trophy c·ªßa ng∆∞·ªùi d√πng",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      if (!sender_id)
        return await sendMessage(channel, "C√∫ ph√°p: !trophy or !trophy  user", message_id,server );
      const result = await trophyUser(user_id ? user_id : sender_id);

      if (
        result &&
        Array.isArray(result.content) &&
        typeof result.content[0]?.text === "string"
      ) {
        const text = formatListTrophyUser(JSON.parse(result.content[0].text));

        await sendMessage(channel, text, message_id,server);
      } else {
        await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.", message_id,server);
      }
    },
  },

  list: {
    description: "Xem danh s√°ch role rewards ",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      const result = await listRoleRewards();
      if (
        result &&
        Array.isArray(result.content) &&
        typeof result.content[0]?.text === "string"
      ) {
        const text = formatListRole(JSON.parse(result.content[0].text));

        await sendMessage(channel, text, message_id,server);
      } else {
        await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.",message_id ,server);
      }
    },
  },

  role_reward : {
    description: "G√°n role khi ƒë·∫°t ƒëi·ªÉm",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      const fullArg = args.join(" ");
      const [action, roleName, score] = fullArg.split("|").map((s) => s.trim());


      const result = await assignRoleOnScore(action as Action["action"], roleName, +score || 0);
      if (
        result &&
        Array.isArray(result.content) &&
        typeof result.content[0]?.text === "string"
      ) {
        await sendMessage(channel,  result.content[0]?.text, message_id,server);
      } else {
        await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.", message_id,server);
      }
    },
  },

  list_trophy: {
    description: "Xem danh s√°ch trophy ",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      const result = await listTrophy();
      if (
        result &&
        Array.isArray(result.content) &&
        typeof result.content[0]?.text === "string"
      ) {
        const text = formatListTrophy(JSON.parse(result.content[0].text));

        await sendMessage(channel, text, message_id,server);
      } else {
        await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.", message_id,server);
      }
    },
  },

  top_week: {
    description: "Xem danh s√°ch top reward tu·∫ßn",
    execute: async (
      channel: string,
      sender_id: string,
      user_id: string,
      server: string,
      message_id:string,
      args: string[],
    ) => {
      const result = await topWeek();

      console.log("result", result);
      if (
        result &&
        Array.isArray(result.content) &&
        typeof result.content[0]?.text === "string"
      ) {
        const text = formatLeaderboard(JSON.parse(result.content[0].text));

        await sendMessage(channel, text, message_id,server);
      } else {
        await sendMessage(channel, "L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.", message_id,server);
      }
    },
  },
  
};
